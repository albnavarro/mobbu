@use './grid-map' as *;
@use './font-map' as *;
@use './mq-map' as *;

// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@use 'sass:math';
@use 'sass:map';

@function strip-unit($value) {
    @return math.div($value, $value * 0 + 1);
}

/**
* Calc REM in houses at the lowest average media query
* 
* @param {String} $pixel - current value in pixel
* @param {String} $mq - reference brackpoint
* 
* @return {String}
*/
@function rem($pixels, $mq: '') {
    $html-font-size: filter-nested-map($font-map, size);

    /*
    Get default font size;
    */
    $default-map: filter-nested-map($font-map, default);
    $defult-key: null;

    /*
    TODO: get first or last value in map.
    We expect only one default value.
    */
    @each $key, $value in $default-map {
        $defult-key: $key;
    }

    @if unitless($pixels) {
        $pixels: $pixels * 1px;
    }

    @if $mq == '' {
        $mq: map.get($html-font-size, $defult-key);
    } @else {
        $mq: map.get($html-font-size, $mq);
    }

    @return math.div($pixels, $mq) * 1rem;
}

/**
* Calc EM in houses at the lowest average media query
* 
* @param {String} $pixel - current value in pixel
* @param {String} $mq - reference brackpoint
* 
* @return {String}
*/
@function em($pixels, $mq: '') {
    $html-font-size: filter-nested-map($font-map, size);

    /*
    Get default font size;
    */
    $default-map: filter-nested-map($font-map, default);
    $defult-key: null;

    /*
    TODO: get first or last value in map.
    We expect only one default value.
    */
    @each $key, $value in $default-map {
        $defult-key: $key;
    }

    @if unitless($pixels) {
        $pixels: $pixels * 1px;
    }

    @if $mq == '' {
        $mq: map.get($html-font-size, $default-font-size);
    } @else {
        $mq: map.get($html-font-size, $mq);
    }

    @return math.div($pixels, $mq) * 1em;
}

@function line-height($font-size, $line-height) {
    @return math.div($line-height, $font-size) * 1em;
}

/**
* Get container size in rem or vw based to specific unit misure
* 
* @param {Map}    $unit-map  - Map of unit misuse per brackpoint.
* @param {String} $key - current breackpint.
* @param {String} $value - current unit misure.
* 
* @return {String}
*/
@function get-container-with($unit-map, $key, $value) {
    $unit-misure: map.get($unit-map, $key);
    $max-width: 0;

    @if $unit-misure == 'px' {
        $max-width: min(rem($value, $key), calc(100vw - var(--scrollbar-with)));
    }

    @if $unit-misure == 'vw' {
        $max-width: min(($value * 1vw), calc(100vw - var(--scrollbar-with)));
    }

    @return $max-width;
}

@function filter-nested-map($original, $keyOriginal) {
    $filter-map: ();

    @each $key, $value in $original {
        $sub-map: map.get($original, $key);

        @if $sub-map {
            $value-parsed: map.get($sub-map, $keyOriginal);

            @if $value-parsed {
                $filter-map: map.merge(
                    $filter-map,
                    (
                        $key: $value-parsed,
                    )
                );
            }
        }
    }

    @return $filter-map;
}

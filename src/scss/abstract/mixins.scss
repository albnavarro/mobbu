/* stylelint-disable scss/operator-no-newline-after */
// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@use 'sass-mq/mq';
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use '../sass_mq' as *;
@use './function' as *;

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/**
* Set html fontsize on html for each queries.
*/
@mixin font-size-map() {
    $html-font-size: filter-nested-map($font-map, size);
    $html-font-unit: filter-nested-map($font-map, unit);
    $html-vw-ratio: filter-nested-map($font-map, ratio);

    @each $key, $value in $html-font-size {
        $unit-misure: map.get($html-font-unit, $key);
        $ratio: map.get($html-vw-ratio, $key);
        $font-size: 0;

        @if $unit-misure {
            /*
            Pixel html font size
            */
            @if $unit-misure == 'px' {
                $font-size: $value;
            }

            /*
            vw html font-size on brackpoint ratio.
            */
            @if $unit-misure == 'vw' {
                $breakpoint: strip-unit(map.get($breakpoints, $key));

                @if $ratio {
                    $breakpoint: strip-unit($ratio);
                }

                $font-size: math.div((strip-unit($value) * 100), $breakpoint) *
                    1vw;
            }

            html {
                @include mq.mq($key) {
                    font-size: $font-size;
                }
            }
        }
    }
}

/**
* Set cssVar for col/gutter on root for each brackpoint.
* --col-size: 1 column + 1 gutter.
* --gap-size: 1 gutter.
*
*
* Snippet to update --scrollbar-with.
* window.innerWidth - document.documentElement.clientWidth;
*/
@mixin grid-context() {
    @each $key, $value in $grid-container-size {
        $col-number: map.get($grid-col-count, $key);
        $gap-size: map.get($grid-gap-size, $key);
        $max-width: get-container-with($grid-unit-misure, $key, $value);

        // Default value
        $additional-value: '0px';

        @if $spread == 'narrow' {
            $additional-value: '0px';
        }

        @if $spread == 'wide' {
            $additional-value: var(--gap-size) / #{$col-number};
        }

        @if $spread == 'wider' {
            $additional-value: calc(var(--gap-size) * 2) / #{$col-number};
        }

        :root {
            /*
            Update this value in jsvascript on resize.
            This is only a default value.
            */
            --scrollbar-with: 15px;

            $max-with-parsed: $max-width / $col-number;
            $gap-parsed: var(--gap-size) / ($col-number);

            @include mq.mq($key) {
                --col-size: calc(
                    #{$max-with-parsed} + #{$gap-parsed} - #{$additional-value}
                );
                --gap-size: #{rem($gap-size, $key)};
            }
        }
    }
}

/**
* Set container width for each brackpoint.
*/
@mixin container() {
    max-width: 100%;
    margin: auto;

    @if $spread == 'wide' {
        padding-inline: calc(var(--gap-size) / 2);
    }

    @if $spread == 'wider' {
        padding-inline: calc(var(--gap-size));
    }

    @each $key, $value in $grid-container-size {
        @include mq.mq($key) {
            max-width: get-container-with($grid-unit-misure, $key, $value);
        }
    }
}

/**
* Set grid width for each brackpoint.
*/
@mixin grid() {
    display: grid;
    gap: var(--gap-size);

    @include container;

    @each $key, $value in $grid-container-size {
        $col-number: map.get($grid-col-count, $key);

        @include mq.mq($key) {
            grid-template-columns: repeat($col-number, 1fr);
        }
    }
}

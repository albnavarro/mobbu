// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@use 'sass-mq/mq';
@use 'sass:math';
@use 'sass:map';
@use '../sass_mq' as *;
@use './function' as *;

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

// responsive font size mixin v2
@mixin font-size-map() {
    @each $key, $value in $html-font-size {
        $unit-misure: map.get($html-font-unit, $key);
        $font-size: 0;

        @if $unit-misure {
            /*
            Pixel html font size
            */
            @if $unit-misure == 'px' {
                $font-size: $value;
            }

            /*
            vw html font-size
            */
            @if $unit-misure == 'vw' {
                $breakpoint: strip-unit(map.get($breakpoints, $key));
                $font-size: math.div((strip-unit($value) * 100), $breakpoint) *
                    1vw;
            }

            @include mq.mq($key) {
                font-size: $font-size;
            }
        }
    }
}

// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@use 'sass:math';
@use 'sass:map';
@use '../vars' as *;
@use '../../../node_modules/sass-mq/mq';

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

// responsive font size mixin v2
@mixin font-size-map() {
    $last-output: null;
    $last-unit: null;

    @each $key, $value in $html-font-size {
        $unit-misure: map.get($html-font-unit, $key);

        @if $last-output != $value or $last-unit != $unit-misure {
            // Pixel html font size
            @if $unit-misure == 'px' {
                $current-value: $value;

                @include mq.mq($key) {
                    font-size: $current-value;
                }
            }

            // VW html font-size
            @if $unit-misure == 'vw' {
                @include mq.mq($key) {
                    $breakpoint: strip-unit(map.get($breakpoints, $key));
                    $current-value: math.div(
                            (strip-unit($value) * 100),
                            $breakpoint
                        ) * 1vw;

                    font-size: $current-value;
                }
            }
        }

        $last-output: $value;
        $last-unit: $unit-misure;
    }
}

@function strip-unit($value) {
    @return math.div($value, $value * 0 + 1);
}

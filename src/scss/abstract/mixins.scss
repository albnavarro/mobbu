/* stylelint-disable scss/operator-no-newline-after */
// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use './mq-map' as *;
@use './grid-map' as *;
@use './font-map' as *;
@use './function' as *;
@use './colors' as *;

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/**
* Set html fontsize on html for each queries.
*/
@mixin font-size-map() {
    $html-font-size: filter-nested-map($font-map, size);
    $html-font-unit: filter-nested-map($font-map, unit);
    $html-vw-ratio: filter-nested-map($font-map, ratio);
    $last-value: '';

    @each $key, $value in $html-font-size {
        $unit-misure: map.get($html-font-unit, $key) or 'px';
        $ratio: map.get($html-vw-ratio, $key);
        $font-size: 0;

        /*
            Pixel html font size
            */
        @if $unit-misure == 'px' {
            $font-size: $value;
        }

        /*
            vw html font-size on brackpoint ratio.
            */
        @if $unit-misure == 'vw' {
            $breakpoint: strip-unit(map.get($breakpoints, $key));

            @if $ratio {
                $breakpoint: strip-unit($ratio);
            }

            $font-size: math.div((strip-unit($value) * 100), $breakpoint) * 1vw;
        }

        @if $last-value != $font-size {
            html {
                @include mq($key) {
                    font-size: $font-size;
                }
            }
        }

        $last-value: $font-size;
    }
}

/**
* Set cssVar for col/gutter on root for each brackpoint.
* --col-size: 1 column + 1 gutter.
* --gap-size: 1 gutter.
*
*
* Snippet to update --scrollbar-with.
* window.innerWidth - document.documentElement.clientWidth;
*/
@mixin grid-context() {
    $grid-unit-misure: filter-nested-map($grid-map, unit);
    $grid-container-size: filter-nested-map($grid-map, size);
    $grid-gap-size: filter-nested-map($grid-map, gap);
    $grid-col-count: filter-nested-map($grid-map, column);
    $extra-side-map: filter-nested-map($grid-map, extraside);

    @each $key, $value in $grid-container-size {
        $col-number: map.get($grid-col-count, $key);

        /*
        max-with value.
        */
        $max-width: get-container-with($grid-unit-misure, $key, $value);

        /*
        gap value.
        */
        $gap-size: map.get($grid-gap-size, $key);
        $gap-to-rem: rem($gap-size, $key);

        /**
        subdivide col and gap for numbers of column
        */
        $max-with-unit: list.slash($max-width, $col-number);
        $gap-unit: math.div($gap-to-rem, $col-number);

        /*
        Add etra side gap.
        */
        $extra-side-gutter: map.get($extra-side-map, $key) or 0;
        $extra-side-gutter-to-rem: rem($extra-side-gutter, $key);

        :root {
            @include mq($key) {
                --extra-side-gutter: #{$extra-side-gutter-to-rem};
                --gap-size: #{$gap-to-rem};

                /*
                Update this value in jsvascript on resize.
                This is only a default value.
                */
                --scrollbar-with: 15px;

                @if $spread == 'narrow' {
                    --col-size: calc(#{$max-with-unit} + #{$gap-unit});
                }

                @if $spread == 'wide' {
                    --col-size: #{$max-with-unit};
                }

                @if $spread == 'wider' {
                    --col-size: calc(#{$max-with-unit} - #{$gap-unit});
                }
            }
        }
    }
}

/**
* Set container width for each brackpoint.
*/
@mixin container() {
    $grid-unit-misure: filter-nested-map($grid-map, unit);
    $grid-container-size: filter-nested-map($grid-map, size);
    $max-width: 0;

    width: 100%;
    margin: auto;

    @if $spread == 'narrow' {
        padding-inline: var(--extra-side-gutter);
    }

    @if $spread == 'wide' {
        padding-inline: calc((var(--gap-size) / 2) + var(--extra-side-gutter));
    }

    @if $spread == 'wider' {
        padding-inline: calc(var(--gap-size) + var(--extra-side-gutter));
    }

    @each $key, $value in $grid-container-size {
        @include mq($key) {
            $unit-misure: map.get($grid-unit-misure, $key);

            @if $unit-misure == 'px' {
                max-width: min(rem($value, $key));
            }

            /*
            In case of % use only with: 100%;
            */
            @if $unit-misure == '%' {
                @if $value != 100 {
                    @debug ('container: with % value only 100 is availbale');
                }

                max-width: none;
            }
        }
    }
}

/**
* Set grid width for each brackpoint.
*/
@mixin grid() {
    $grid-container-size: filter-nested-map($grid-map, size);
    $grid-col-count: filter-nested-map($grid-map, column);

    display: grid;
    gap: var(--gap-size);

    @include container;

    @each $key, $value in $grid-container-size {
        $col-number: map.get($grid-col-count, $key);

        @include mq($key) {
            grid-template-columns: repeat($col-number, 1fr);
        }
    }
}

@mixin button() {
    padding: rem(5) rem(10);
    margin-bottom: rem(10);
    margin-right: rem(10);
    display: inline-block;
    text-decoration: none;
    min-width: rem(250);
    color: $black;
    text-align: center;
    transition: background 0.35s;
    font-size: rem(14);
    background: $grey-lightteen;
    border: 0;
    position: relative;
    border-radius: rem(20);

    &:hover {
        background: $black;
        color: $white;
    }
}

@mixin user-select-none {
    user-select: none;
    -webkit-touch-callout: none; /* iOS Safari */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -webkit-user-select: none; /* Safari, Chrome, Opera, Samsung */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -khtml-user-select: none; /* Konqueror HTML */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -moz-user-select: none; /* Firefox */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -ms-user-select: none; /* Edge, IE */
}

@mixin user-select-text {
    user-select: text;
    -webkit-touch-callout: text; /* iOS Safari */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -webkit-user-select: text; /* Safari, Chrome, Opera, Samsung */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -khtml-user-select: text; /* Konqueror HTML */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -moz-user-select: text; /* Firefox */
    /* stylelint-disable-next-line  property-no-vendor-prefix */
    -ms-user-select: text; /* Edge, IE */
}

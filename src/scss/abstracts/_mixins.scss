// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@use 'sass:math';
@use 'sass:map';

@mixin on-event($self: false) {
    @if $self {
        &.active,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

// responsive font size mixin v2
@mixin font-size-map() {
    $last-output: null;

    @each $key, $value in $html-font-size {
        @if $last-output != $value {
            @include mq($from: $key) {
                font-size: $value;
            }
        }

        $last-output: $value;
    }
}

@function strip-unit($value) {
    @return math.div($value, $value * 0 + 1);
}

// Grid

@mixin debug-grid(
    $max-width: false,
    $g: $grid-config,
    $show-br: $mq-show-breakpoints
) {
    @include mq-show-breakpoints($show-br);

    body::after {
        content: '';
        position: fixed;
        z-index: 10000;
        top: 0;
        right: 0;
        left: 0;
        width: 100%;
        height: 100%;
        margin-inline: auto;
        pointer-events: none;

        @if $max-width {
            max-width: map.get($mq-breakpoints, $max-width);
        }

        @each $mq, $grid in $g {
            @include mq($mq) {
                background: sass-grid($grid);
            }
        }
    }
}

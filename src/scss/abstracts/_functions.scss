// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@use 'sass:math';
@use 'sass:map';

@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
    @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
    @return asset($base, 'fonts/', $path);
}

// calc REM in houses at the lowest average media query
@function rem($pixels, $mq: '') {
    @if unitless($pixels) {
        $pixels: $pixels * 1px;
    }

    $keys: map.keys($html-font-size);

    @if $mq == '' {
        $mq: map.get($html-font-size, $default-font-size);
    } @else {
        $mq: map.get($html-font-size, $mq);
    }

    @return math.div($pixels, $mq) * 1rem;
}

// calc EM in houses at the lowest average media query
@function em($pixels, $mq: '') {
    @if unitless($pixels) {
        $pixels: $pixels * 1px;
    }

    $keys: map.keys($html-font-size);

    @if $mq == '' {
        $mq: map.get($html-font-size, $default-font-size);
    } @else {
        $mq: map.get($html-font-size, $mq);
    }

    @return math.div($pixels, $mq) * 1em;
}

@function line-height($font-size, $line-height) {
    @return math.div($line-height, $font-size) * 1em;
}

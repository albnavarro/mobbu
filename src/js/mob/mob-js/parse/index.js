import { MAIN_STORE_ASYNC_PARSER } from '../main-store/constant';
import { mainStore } from '../main-store/main-store';
import { parseComponentsWhile } from './parse-function-while';
import { resetCurrentIterationCounter } from './utils';

/**
 * @param {object} obj
 * @param {HTMLElement} obj.element
 * @param {boolean} [obj.persistent]
 * @param {string} [obj.parentIdForced]
 * @returns {Promise<void>} A promise to the token.
 */
export const parseComponents = async ({
    element,
    persistent = false,
    parentIdForced = '',
}) => {
    await parseComponentsWhile({
        element,
        persistent,
        parentIdForced,
    });

    resetCurrentIterationCounter();
};

/**
 * Parse component from inner component generated by first parseComponent. Use pub/sub to avoid circular dependencies.
 *
 * @returns {void}
 */
export const initParseWatcher = () => {
    mainStore.watch(
        MAIN_STORE_ASYNC_PARSER,
        async ({ element, parentId, persistent = false }) => {
            await parseComponents({
                element,
                parentIdForced: parentId ?? '',
                persistent,
            });
        }
    );
};

/**
 * @param {HTMLElement} element
 * @returns {Promise<void>} A promise to the token.
 */
export const parseDom = async (element) => {
    await parseComponents({
        element,
    });
};

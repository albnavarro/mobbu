// @ts-check

import { MAIN_STORE_ASYNC_PARSER } from '../mainStore/constant';
import { mainStore } from '../mainStore/mainStore';
import { decrementParserCounter, incrementParserCounter } from './counter';
import { clearUserPlaceHolder } from '../modules/userComponent';
import { parseComponentsRecursive } from './parseFunction';
import { useQuery } from './useQuery';
import { resetCurrentIterationCounter } from './utils';
import { mobCore } from '../../mobCore';

/**
 * @param {object} obj
 * @param {HTMLElement} obj.element
 * @param {boolean} [ obj.persistent  ]
 * @param {string} [ obj.parentIdForced ]
 * @return {Promise<void>} A promise to the token.
 *
 * @description
 */
export const parseComponents = async ({
    element,
    persistent = false,
    parentIdForced = '',
}) => {
    incrementParserCounter();

    await parseComponentsRecursive({
        element,
        persistent,
        parentIdForced,
    });

    resetCurrentIterationCounter();

    /**
     * Next parse start one frame after previous
     * Check end of all parse one frame after
     */
    mobCore.useNextTick(() => {
        const activeParser = decrementParserCounter();

        if (!useQuery && activeParser === 0) {
            clearUserPlaceHolder();
        }
    });
};

/**
 * @description
 * Parse component from inner component generated by first parseComponent.
 * Use pub/sub to avoid circular dependencies.
 *
 * @returns {void}
 */
export const initParseWatcher = () => {
    mainStore.watch(
        MAIN_STORE_ASYNC_PARSER,
        async ({ element, parentId, persistent = false }) => {
            await parseComponents({
                element,
                parentIdForced: parentId ?? '',
                persistent,
            });
        }
    );
};

/**
 * @param {HTMLElement} element
 * @return {Promise<void>} A promise to the token.
 *
 * @description
 */
export const parseDom = async (element) => {
    await parseComponents({
        element,
    });
};

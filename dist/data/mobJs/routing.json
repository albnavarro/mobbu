{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1"
            },
            "content": "routing"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "To define a route just create a function that returns the DOM of the route. The name of the function will then be the name of the route with the # character in front e.g.:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "it is not possible to use reactive props in the route as this module is not a component."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "function",
                "label": "Function"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Route:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/routingFunction.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "link navigate",
                "label": "Link_navigate"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Navigate via link"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/routingLink.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "javascript navigate",
                "label": "Javascript_navigate"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Navigate via javascript"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/routeLinkJs.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "initialization",
                "label": "Initialization"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Initialization"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "All the routes will then be exported and imported during the initialization of the app:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/routeInizialization.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "events",
                "label": "Events"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2"
            },
            "content": "Events"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "A series of events are available to intercept and react to the change of course, to do this a special store called mainStore is available. Being a store, all the methods listed in the <a href='/#mobCore_store'>store</a> apply"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "events",
                "label": "beforeRouteChange"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "beforeRouteChange"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event launched <span>before the change of route</span>, as parameter we would have the name of the <span>next route</span>."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/beforeRouteChange.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "events",
                "label": "beforeRouteLeave"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "beforeRouteLeave"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event launched <span>before the change of route</span>, as parameter we would have the name of the <span>previous route</span>."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/beforeRouteLeave.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "events",
                "label": "afterRouteChange"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "afterRouteChange"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event launched <span>after the change of route</span>, as parameter we would have the name of the <span>current route</span>."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/afterRouteChange.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "events",
                "label": "activeRoute"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "activeRoute"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value of the current route will be returned."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobJs/activeRoute.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        }
    ]
}

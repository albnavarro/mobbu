{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1"
            },
            "content": "Async timeline"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Async timeline is a <span>promise manager</span>., it allows you to <span>coordinate tween, lerp and spring</span>, it can manage <span>single tweens</span> or <span>groups of tweens</span>. Manages <spna>loops</span> and allows you to use <span>custom functions</span> between different tweens."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "Params:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineSchema.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimeline.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "repeat:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines the <span>number of loops</span> to run.</br><span>Number -1</span> means that the timeline will run in an <span>infinite loop</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "yoyo:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Reverse the direction</span> each time the timeline ends.<br/><span>The current/arrival/destination values of each tween will be reversed according to the timeline.</span>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "freeMode:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": " By <span>default</span> when a <span>play or a playReverse</span> is performed a <span>`set method`</span> is executed on each tween using the <span>`initial values`</span> (play) or the <span>`final values`</span> (playReverse) to make each tween <span>start from a 'neutral' position</span> regardless of its value current. Sets are not saved in the timeline but are <span>`temporary`</span>. <span>If the `freeMode` property is set to `true`</span> a sets are not executed so that <span>multiple timelines can control the same tweens</span> always starting from the current value of each tween.<br/> <span>`The default is false`</span>. "
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "autoSet:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>If `autoSet` is set to true for each tween a `set method` corresponding to the `beginning` and `end` of the same timeline will be created</span>. The newly created methods will be <span>`permanently`</span> added to the ends of the timeline. As these sets are permanent unlike the default behavior (with freeMode = false) during a repeat the timeline will always restart from the initial (or final) value. "
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "code_example",
                "label": "code&nbsp;example"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "code example"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineExample.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "ovverride",
                "label": "tween&nbsp;params&nbsp;and&nbsp;override"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "tween params and override"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>The parameters relating to each instance</span> will be used, if necessary, according to the following scheme, in addition there is the <span>delay</span> parameter expressed in milliseconds."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncOverride.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "Set"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineSet.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goto",
                "label": "goTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "goTo"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineGoTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFrom",
                "label": "goFrom"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "goFrom"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineGoFrom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFromTo",
                "label": "goFromTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "goFromTo"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineGoFromTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "add",
                "label": "add/addAsync"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "add/addAsync"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to use both synchronous and asynchronous custom functions within the timeline. Both functions will be executed only when the promise has been resolved ( tween ). This allows you to execute functions exactly after the previous one or before the next one without any risk of even minimal overlap."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "addAsync params:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span>resolve</span>: the resolve function",
                    "<span>loop</span>: current loop counter",
                    "<span>direction</span>: current direction <span>'forward | backward'</span>"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineAdd.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "sync",
                "label": "sync"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "sync"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Synchronize the current values of one tween with another. <span>Cannot be used within a group</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineSync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "createGroup",
                "label": "create/closeGroup"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "create/closeGroup"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Manages multiple instances in parallel.</span><br/> The <span>waitComplete</span> parameter allows you to decide whether the group is resolved when the last tween is resolved ( <span>promiseAll</span>) or when the first is resolved ( <span>promiseRace</span> )."
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span>true</span>: promiseAll",
                    "<span>false</span>: promiseRace"
                ]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Within a group each instance will still be able to use the <span>delay property</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineGroup.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "suspend",
                "label": "suspend"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "suspend"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Put the <span>timeline on hold</span>, through the <span>resume()</span> method, the timeline will restart. As with add/addAsync remove will only be executed when the previous tween is completely finished."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineSuspend.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "label",
                "label": "label"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "label"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Adds a label at a specific point in the timeline, the label will then be used by the playFrom(label) or playFromReverse(label) method"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineLabel.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "utils",
                "label": "play/playRevese/stop"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "play/playReverse/stop"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>play</span>, <span>play reverse</span> and <span>stop</span> of the timeline. The <span>play()</span> and <span>playReverse()</span> methods <span>will return a promise when the timeline is completed</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelinePlay.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "playFrom",
                "label": "playFrom/playFromReverse"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "playFrom/playFromReverse"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Bla bla bla"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/test.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "pause/resume",
                "label": "pause/resume"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "pause/resume"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Bla bla bla"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/test.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "reverseNext",
                "label": "reverseNext"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "reverseNext"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Reverses the timeline as soon as the current promise/tween is finished."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/asyncTimelineNext.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "onLoopEnd",
                "label": "onLoopEnd/onComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "onLoopEnd/onComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Bla bla bla"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/test.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "destroy",
                "label": "destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Bla bla bla"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/test.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "utils",
                "label": "Utils"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Utils"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "isPaused/isSuspended/getDirection/setTween"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/test.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1"
            },
            "content": "Tween animations"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Tweens can be thought of as stores that simply interpolate numbers and launch callbacks."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "line": true
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Time-based:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": ["<span>Tween</span>"]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It cannot be used interactively with a mouse etc... it simply processes the data over a given period of time."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Based on a precision value:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": ["<span>Lerp</span>", "<span>Spring</span>"]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Suitable for interactive use such as mouse trail etc..."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "line": true
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Common params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "data:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Data object."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "realtive:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If true the values will always be relative to the previous value reached by the tween."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "stagger:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "To manage staggers refer to the <a href='/#mobMotion_stagger'>stagger</a> section"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "tween",
                "label": "Tween",
                "line": true
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "Tween:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Additional params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "duration:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The duration of the tween in milliseconds"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "ease:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The animation curve"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "All Params:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/tweenType.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/tween.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "Spring",
                "label": "spring",
                "line": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "Spring"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Additional params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "config:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "preset configuration (The configurations were taken from react-spring)"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": ["default", "gentle", "wobbly", "bounce", "scroller"]
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "configProp"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Here it is possible to alter the individual values of the chosen configuration."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "All Params:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/springType.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/spring.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "lerp",
                "label": "Lerp",
                "line": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "color": "green"
            },
            "content": "Lerp"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Additional params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "velocity:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines the speed of the lerp, it must be a value between <span>0.01</span> and <span>0.1</span>. The default value is <span>0.06</span>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "precision:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Indicates the difference between the current value and the target value for which the animation can be considered finished. The default value is <span>0.01</span>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "All Params:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/lerpType.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/lerp.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The set() method instantly applies the applied value, even if the value is not applied it returns a promise,"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/set.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goto",
                "label": "goTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goTo"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The goTo method takes the values <span>from the current state</span> to the state indicated in the <span>first parameter</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the <span>second parameter</span> it will be possible to temporarily change the default values of the tween except for the configuration of the stagger property."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value can be <span>numeric</span> or the <span>result of a function</span>, The function value will be recalculated at each play()"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/goTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "gofrom",
                "label": "goFrom"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFrom"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The goFrom method brings the values <span>from the state indicated in the first parameter</span> to the <span>current state</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the <span>second parameter</span> it will be possible to temporarily change the default values of the tween except for the configuration of the stagger property."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value can be <span>numeric</span> or the <span>result of a function</span>, The function value will be recalculated at each play()"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/goFrom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "gofromto",
                "label": "goFromTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFromTo"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The goFromTo method takes the values from the state indicated in the <span>first parameter</span> to the state indicated in the <span>second parameter</span>. The two parameters must have the same keys."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the <span>third parameter</span> it will be possible to temporarily change the default values of the tween except for the configuration of the stagger property."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value can be <span>numeric</span> or the <span>result of a function</span>, The function value will be recalculated at each play()"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/goFromTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "subscribe",
                "label": "Subscribe"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Subscribe"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The subscribe method will allow us to apply the values in <span>real time</span> to our target."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The subscribe() method always returns an <span>unsubscribe()</span> function"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/subscribe.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "subscribeCache",
                "label": "SubscribeCache"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "SubscribeCache"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "While the subscribe method stores the entire function for the number of targets used, the subscribeCache method stores the target and the function only once, and creates an array with only the numeric values to pass to the function.<br/> This method is specific for the use of <a href='/#mobMotion_stagger'>stagger</a> by optimizing <span>memory consumption</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Unlike the subscribe method, subscribeCache requires <span>two parameters</span>, the <span>first is the target</span>, the <span>second is the callback</span> to execute."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/subscribeCache.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "onComplete",
                "label": "onComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "onComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The onComplete method is launched when the animation is finished, it can be used for example to inhibit the use of the <span>GPU</span> unnecessarily:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/onComplete.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        }
    ]
}

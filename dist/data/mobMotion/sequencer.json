{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1"
            },
            "content": "Sequencer"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The sequencer is a different type of tween, it is not tied to time or to a precision value. We can imagine it as a store which, given a value, returns a series of interprolated data. The sequencer has a draw(value) function that takes care of interpolating the data, in fact it is the API that the sequencer exposes to be controlled. <a href='/#mobMotion_sync_timeline'>syncTimeline</a> and <a href='/#mobMotion_scrolltrigger'>scrolTrigger</a> can use the sequencer by passing partial values to it."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<a href='/#caterpillarN2'>example</a>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "duration"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "We can see the duration property as its main property. <span>It is not a time value, but rather a numerical range, which by default is 10.</span>"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Within this range we can define how each property varies, its greatest value is the possibility of managing each individual property independently as we will see later.<br/> Based on our needs we can readjust this value to a more specific one that can help us in managing the individual values."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In fact we can think of a <span>musical sequencer</span> where we are free to move the beginning and end of each track. If our track lasts 2.30 minutes we can set this value and manage the attack and end of each individual instrument within our track."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If we decide to use a timeline to manage the sequencer ( <a href='/#mobMotion_sync_timeline'>syncTimeline</a> ) the duration of the timeline will be the real duration while the duration parameter of the sequencer will be managed through a simple proportion. The same thing will happen with <a href='/#mobMotion_scrolltrigger'>scrollTrigger</a>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "All Params:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerType.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Inizialization"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The initialization code is almost identical (only the relative option is missing) to <a href='/#mobMotion_tween_spring_lerp'>tween</a>:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencer.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goto",
                "label": "Goto"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goTo"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The goTo method takes the values <span>from the current state</span> to the state indicated in the <span>first parameter</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the second parameter we define the <span>start</span> and <span>end</span> value in the range defined by us, we can also apply a specific easing."
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "If the start value is not used it will be 0,",
                    "If the end value is not used it will be equal to the value defined in the duration parameter."
                ]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value can be <span>numeric</span> or the <span>result of a function</span>, in this case it will be possible to vary the value while running"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerGoTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFrom",
                "label": "goFrom"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFrom"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Like goTo but the value of the first parameter will be the starting value and the arrival value will be the current one."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerGoFrom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFromTo",
                "label": "goFromTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFromTo"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Like goTo but the value of the first parameter will be the starting value and the second parameter will be the arrival value."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerGoFromTo.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "add",
                "label": "add"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "add"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to execute a <span>custom function</span> at a certain point of the duration value. The callback will be launched <span>as soon as the indicated value is exceeded</span>, sequencer and syncTimeline are not based on promsie therefore it is necessary to intercept the first available moment in which to execute the function."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The add method has two parameters, the callBack and a numeric value indicating when to execute the callBack."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Callback Params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "value:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The exact value at which the function is launched. As above, if we indicate 2 the function can start at the value 2.05"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "isForced:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The value will be true if the sequencer is started beyond the indicated value, in this case we can decide whether to launch the function or not, as in reality the value has never been exceeded."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "direction:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>'backward' | 'forward' | 'none'</span>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerAdd.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "label",
                "label": "label"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "label"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to define labels to use as a reference from our <a href='/#mobMotion_sync_timeline'>syncTimeline</a>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerLabel.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "subscribe",
                "label": "subscribe"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "subscribe"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The subscribe method will allow us to apply the values in <span>real time</span> to our target."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The subscribe() method always returns an <span>unsubscribe()</span> function"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerSubscribe.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "subscribeCache",
                "label": "subscribeCache"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "subscribeCache"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "While the subscribe method stores the entire function for the number of targets used, the subscribeCache method stores the target and the function only once, and creates an array with only the numeric values to pass to the function.<br/> This method is specific for the use of <a href='/#mobMotion_stagger'>stagger</a> by optimizing <span>memory consumption</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Unlike the subscribe method, subscribeCache requires <span>two parameters</span>, the <span>first is the target</span>, the <span>second is the callback</span> to execute."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/sequencerSubscribeCache.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "onstop",
                "label": "onStop"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "onStop"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The onStop method is launched when the animation/scrollTrigger is stopped, it can be used for example to inhibit the use of the <span>GPU</span> unnecessarily:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/onStop.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "masterSequencer",
                "label": "masterSequencer"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "masterSequencer"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The <span>masterSequencer</span> allows you to group multiple sequencers and pass a single instance to the respective syncTimeline/scrollTrigger.<br/> This module is very useful when using <a href='/#mobMotion_create_stagger'>createStagger</a>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "/snippets/mobMotion/masterSequencer.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "createStagger",
                "label": "createStagger"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "createStagger"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Sequencers can use the <a href='/#mobMotion_create_stagger'>createStagger</a> utility to synchronize multiple instances using stagger parameters."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

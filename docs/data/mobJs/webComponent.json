{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "webComponent"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Function"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "To use web components it is necessary that in the html function in which the dom is defined, the first node has the same tag used in the <a href='./#mobJs_component'>definition</a> of the component and used to recall it:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/webComponentFunction.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 13
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "createComponent additional params:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the <a href='./#mobJs_component'>createComponent</a> function it will be possible to define the functions that interact with the life cycle of the component:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "- attributeToObserve",
                    "- constructorCallback",
                    "- connectedCallback",
                    "- disconnectedCallback",
                    "- adoptedCallback",
                    "- attributeChangedCallback",
                    "- style"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Common argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Each param has the context as an argument, and optionally as in the example below an object with all the utilities of our function"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "context ( native webComponent context ):"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": ["webComponent context"]
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "data ( Object ):"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "componentId: string",
                    "emit: function",
                    "emitAsync: function",
                    "freezeProp: function",
                    "getChildren: function",
                    "getParentId: function",
                    "getState: function",
                    "remove: function",
                    "setState: function",
                    "unBind: function",
                    "unFreezeProp: function",
                    "watch: function",
                    "watchSync: function",
                    "watchParent: function"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Specific argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "attributeChangedCallback will have additional parameters that allow you to communicate with the native webComponent observer such as:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "name: name of the changed attribute",
                    "oldValue: old value",
                    "newValue: new value"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/webComponentDefinition.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 29
            }
        }
    ]
}

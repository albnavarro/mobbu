{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "webComponent"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Function"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "To use web components it is necessary that in the html function in which the dom is defined, the first node has the same tag used in the <a href='./#mobJs-component'>definition</a> of the component and used to recall it:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/webComponentFunction.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 13
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "createComponent additional params:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "In the <a href='./#mobJs-component'>createComponent</a> function it will be possible to define the functions that interact with the life cycle of the component:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>attributeToObserve</span>",
                    "<span class='quote'>constructorCallback</span>",
                    "<span class='quote'>connectedCallback</span>",
                    "<span class='quote'>disconnectedCallback</span>",
                    "<span class='quote'>adoptedCallback</span>",
                    "<span class='quote'>attributeChangedCallback</span>",
                    "<span class='quote'>style</span>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Common argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Each param has the context as an argument, and optionally as in the example below an object with all the utilities of our function"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "context ( native webComponent context ):"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": ["webComponent context"]
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "data ( Object ):"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>componentId</span>: string",
                    "<span class='quote'>emit</span>: function",
                    "<span class='quote'>emitAsync</span>: function",
                    "<span class='quote'>freezeProp</span>: function",
                    "<span class='quote'>getChildren</span>: function",
                    "<span class='quote'>getParentId</span>: function",
                    "<span class='quote'>getState</span>: function",
                    "<span class='quote'>remove</span>: function",
                    "<span class='quote'>setState</span>: function",
                    "<span class='quote'>unBind</span>: function",
                    "<span class='quote'>unFreezeProp</span>: function",
                    "<span class='quote'>watch</span>: function",
                    "<span class='quote'>watchSync</span>: function",
                    "<span class='quote'>watchParent</span>: function"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Specific argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "attributeChangedCallback will have additional parameters that allow you to communicate with the native webComponent observer such as:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>name</span>: name of the changed attribute",
                    "<span class='quote'>oldValue</span>: old value",
                    "<span class='quote'>newValue</span>: new value"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/webComponentDefinition.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 29
            }
        }
    ]
}

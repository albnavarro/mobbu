{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "reactive list: repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The repeat function allows you to keep updated a list of components whose display depends on an array of any type. If you use an array of objects it will be possible to use a key to maintain the order of the elements at each update."
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": ["<a href='./#dynamic-list'>example</a>"]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "watch:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Reactive state ( must be an array ) to watch"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "clean:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Cleans the entire list by deleting previous components before updating it."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "key:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Optional key, if you are using an array of objects you can use an object key to maintain the order of the results. If multiple elements share the same key, duplicates will be eliminated."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "beforeUpdate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered before list update. The function has as parameter an object composed as follows:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>element</span>: Root component HTMLElement ",
                    "<span class='quote'>container</span>: List container HTMLElement.",
                    "<span class='quote'>childrenId</span>: Active Children ids."
                ]
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "afterUpdate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered after list update. The function has as parameter an object composed as follows:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>element</span>: Root component HTMLElement ",
                    "<span class='quote'>container</span>: List container HTMLElement.",
                    "<span class='quote'>childrenId</span>: Active Children ids."
                ]
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The render function. The function has as parameter an object composed as follows:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>html</span>: the function that return the HTML, Not necessary, you can also use the global html function as in the example below.",
                    "<span class='quote'>sync</span>: sync props is necessary (obbligatorie) for tracking key and and the current value of the state observed."
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Note:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "index / current"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When using the bindProps/bindEvent/delegateEvent functions, it is possible to use the two attributes index and current ( _index and _current in the case of bindProps) to update the state of the component with the corresponding value of the observed array"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/repeat.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 51
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "reactive array: repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The repeat function allows you to keep updated a list of components whose display depends on an array of any type. If you use an array of objects it will be possible to use a key to maintain the order of the elements at each update."
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<a href='./#mobJs-benchmark-repeat-key'>Example repater with key</a>",
                    "<a href='./#mobJs-benchmark-repeat-no-key'>Example repater without key</a>",
                    "<a href='./#matrioska'>Example nested same scope</a>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "bind:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Reactive state ( must be an array ) to watch"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "persistent ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If the repeater is created outside the dynamic content, in the global wrapper, it indicates that the component should not be removed during the route change."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "clean (optional):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Cleans the entire list by deleting previous components before updating it."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "key ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Optional key, if you are using an array of objects you can use an object key to maintain the order of the results. If multiple elements share the same key, duplicates will be eliminated."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>key used:</strong> If a key is used the only <span class='quote'>persistent</span> components will be those that store the key. The components will not be recycled but if they are new they will be recreated from scratch. For this reason it is possible to use the <span class='quote'>currentValue/index</span> parameter passed directly from the repeat function"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>no key used:</strong> If no key is specified or, only new items will be added, but persistent items will not be affected. Each recycled component will be updated through the bindProps function. bindProps/delegateEvent/bindEvent will always return the correct index value relative to the original position of the observed array"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "beforeUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered before list update. The function will be active only after the first rendering"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "afterUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered after list update."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The render function. The function has as parameter an object composed as follows:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<strong>html</strong>: the function that return the HTML, Not necessary, you can also use the global html function as in the example below.",
                    "<strong>sync</strong>: <span class='quote'>sync function</span> is necessary <span class='quote'>obbligatorie</span> for tracking key and and the current value of the state observed.",
                    "<strong>currentValue</strong>: The current value of the array indicated in the bind parameter, this is not reactive, it is possible to use it with <span class='quote'>clean=true</span> or with a <span class='quote'>key</span>.",
                    "<strong>index</strong>: The index value of the array indicated in the bind parameter, this is not reactive, it is possible to use it with <span class='quote'>clean=true</span> or with a <span class='quote'>key</span>."
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "important"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<strong>Container</strong>: Each repeater must be initialized inside a <span class='quote'>dedicated HTML node</span>",
                    "<strong>DOM structure:</strong>: The function must return a DOM where the <span class='quote'>first node</span> must be a <span class='quote'>single node</span>.",
                    "<strong>Multiple components:</strong>: If the function returns <span class='quote'>multiple components</span> it is necessary to wrap them inside a dedicated HTML node.",
                    "<strong>Nested element</strong>: It is possible to nest multiple invalidate/repeaters inside each other in the same <span class='quote'>component/scope</span>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Note:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "bindProps/delegateEvent/bindEvent:  index"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Indicates the position of the component inside a repeater, used to retrieve the current value, equivalent to the index parameter of an <span class='quote'>array.map((item, index) => item)</span>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobJs/repeat.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 118
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Implementations"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Store"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Classic store based on the pub/sub pattern.<br/> This module will then be the basis of the reactivity of mobJs javascript components."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Feature:"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "items": [
                    "Optional Dynamic type check",
                    "Optional Validation function",
                    "Optional Equal check"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Basic implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/basicUse.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Advanced implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/advancedUse.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 26
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "For more advanced use it is necessary to return a function that returns an object with at least one of the following properties: validate, type, skipEqual."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to insert up to a maximum of two levels (both base and advanced use) per property as in the example above."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "To use a object with infinite insertions use the any type.<br/>In this case it will not be possible to define specific properties for nested properties."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/any.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 16
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Params:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "value"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Initial value"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "type"
        },
        {
            "component": "mob-list",
            "props": {
                "items": [
                    "Function | 'Function'",
                    "String | 'String'",
                    "Number | 'Number'",
                    "Boolean | 'Boolean'",
                    "Array | 'Array'",
                    "Element | 'Element'",
                    "HTMLElement | HTMLElement",
                    "NodeList | 'NodeList'",
                    "Set | 'Set'",
                    "Map | 'Map'",
                    "'Any'"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "validate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Validation function to analyze the value. This function will take the current value and old value as input parameters and return a boolean value. The validation status of each property will be displayed in as parameters in watch function and will be retrievable using the getValidation() method."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "skipEqual"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If the value is equal to the previous one, the property will not be updated.<br/>The watches will not be executed and the property will have no effect on the computed related to it. The default value is true."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "strict"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If set to true, the validation function will become blocking and the property will be updated only if the validation function is successful.<br/> The default value is false."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2"
            },
            "content": "Methods:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Update store value:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/set.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 27
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Other set params:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Furthermore it is possible:<br/>Changing data without a reaction ( no callback will be fired ). Default value is true (fire callback).<br/> Clone the original data if using a function and make a copy of the original data. Default value is false (value is not cloned)"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/setParams.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 5
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get",
                "label": "Get"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Get"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will return the complete store, use object destructuring to retrieve the desired property."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/get.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get-props",
                "label": "Get-props"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Get props"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will return a specific prop from store."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/getProp.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-watch",
                "label": "Watch"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Listen to the changing data and return the unsubcribe function."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/watch.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit",
                "label": "Emit"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Emit"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Execute property-related callbacks"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/emit.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit-async",
                "label": "Emit-async"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Emit async"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Execute property-related async callbacks"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/emitAsync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 15
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-computed",
                "label": "Computed"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Computed"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Update properties value if some dependency ( store props) change.<br/> Computed functions are resolved on the javascript loop.<br/> If multiple dependencies change at the same time, the computed will be resolved only once."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/computed.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 15
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "id": "store-destroy",
                "label": "Destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Destroy store and remove all reference"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/destroy.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 4
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Other functions"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "debugStore()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log store status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "debugValidate()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log validate status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/other.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 2
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Implementations"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Store"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Classic store based on the pub/sub pattern</span>.<br/> This module will then be the basis of the reactivity of <span><a href='./#mobJs_overview'>mobJs</a> javascript components</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Feature:"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "items": [
                    "Optional Dynamic type check",
                    "Optional Validation function",
                    "Optional Equal check"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Basic implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/basicUse.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Advanced implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/advancedUse.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "For more advanced use it is necessary to return a function that returns an object with at least one of the following properties: <span>validate, type, skipEqual</span>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to insert up to a <span>maximum of two levels</span> (both base and advanced use) per property as in the example above."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>To use a object with infinite insertions use the any type.</span><br/>In this case it will not be possible to define specific properties for nested properties."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/any.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Properties"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "value"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Initial value"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "type"
        },
        {
            "component": "mob-list",
            "props": {
                "items": [
                    "Function | 'Function'",
                    "String | 'String'",
                    "Number | 'Number'",
                    "Boolean | 'Boolean'",
                    "Array | 'Array'",
                    "Element | 'Element'",
                    "HTMLElement | HTMLElement",
                    "NodeList | 'NodeList'",
                    "Set | 'Set'",
                    "Map | 'Map'",
                    "'Any'"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "validate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Validation function to analyze the value. This function will take the <span>current value and old value as input parameters</span> and <span>return a boolean value</span>. The validation status of each property will be <span>displayed in as paramaters in watch function</span> and will be retrievable using the <span>getValidation()</span> method."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "skipEqual"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>If the value is equal to the previous one, the property will not be updated</span>.<br/>The watches will not be executed and the property will have no effect on the computed related to it. The default value is <span>true</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "strict"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If set to true, the validation function will become blocking and <span>the property will be updated only if the validation function is successful</span>.<br/> The default value is <span>false</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Update</span> store value:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/set.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "Other set params:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Furthermore it is possible:<br/><span>Changing data without a reaction</span> ( no callback will be fired ). Default value is <span>true</span> (fire callback).<br/> <span>Clone the original data</span> if using a function and make a copy of the original data. Default value is <span>false</span> (value is not cloned)"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/setParams.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get",
                "label": "Get"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Get"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will <span>return the complete store</span>, use <span>object destructuring</span> to retrieve the desired property."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/get.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get-props",
                "label": "Get-props"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Get props"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will <span>return a specific prop</span> from store."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/getProp.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-watch",
                "label": "Watch"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Listen to the changing data</span> and return the unsubcribe function."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/watch.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit",
                "label": "Emit"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Emit"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Execute property-related callbacks</span>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/emit.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit-async",
                "label": "Emit-async"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Emit async"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Execute property-related async callbacks</span>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/emitAsync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-computed",
                "label": "Computed"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Computed"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Update properties value if some dependency ( store props) change</span>.<br/> Computed functions are resolved on the <span>javascript loop</span>.<br/> If multiple dependencies change at the <span>same time</span>, the computed <span>will be resolved only once</span>."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/computed.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "id": "store-destroy",
                "label": "Destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span>Destroy store and remove all reference</span>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/destroy.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "color": "green"
            },
            "content": "Other functions"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "debugStore()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log store status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "debugValidate()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log validate status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mobCore/other.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        }
    ]
}

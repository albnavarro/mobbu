{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small",
                "id": "start",
                "label": "Top"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "<span>mobCore</span>/Store"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "A classic store based on the pub/sub pattern.<br />This module also powers the reactivity system in mobJs JavaScript components."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "initialize",
                "label": "Initialize"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 01",
                "isSection": true
            },
            "content": "Initialize"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Feature:"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "items": [
                    "Optional Dynamic type check",
                    "Optional Transform function",
                    "Optional Validation function",
                    "Optional Equal check",
                    "Proxi support"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Basic implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/basic-use.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Advanced implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "For advanced usage, it is necessary to return a function that returns an object containing the <span class='quote'>value</span> property and at least one of the following properties: <span class='quote'>validate</span>, <span class='quote'>type</span>, or <span class='quote'>skipEqual</span>. You can nest up to two levels (supporting both basic and advanced use cases) for properties, as demonstrated in example below."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/advanced-use.js",
                "numLines": 32
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Nested object"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "To use an object with infinite insertions, employ the <span class='quote'>any</span> type. Note that this approach disables property-specific definitions for nested properties.<br/><br/>Works only with advanced implementation"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/any.js",
                "numLines": 16
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "params",
                "label": "State params"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 02",
                "isSection": true
            },
            "content": "State params"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "Details of the parameters if defining a single state via an advanced implementation. Recall that in this case, the practice is to provide a function that returns an object with a value property and one of validate, type, or skipEqual."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "value"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Initial value"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "type"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The type can be defined as a native JavaScript object or in the form of a string.<br/> In the case of any, only the string form is supported."
        },
        {
            "component": "mob-list",
            "props": {
                "items": [
                    "<span class='quote'>Function</span> | 'Function'",
                    "<span class='quote'>String</span> | 'String'",
                    "<span class='quote'>Number</span> | 'Number'",
                    "<span class='quote'>Boolean</span> | 'Boolean'",
                    "<span class='quote'>Array</span> | 'Array'",
                    "<span class='quote'>Element</span> | 'Element'",
                    "<span class='quote'>HTMLElement</span> | HTMLElement",
                    "<span class='quote'>NodeList</span> | 'NodeList'",
                    "<span class='quote'>Set</span> | 'Set'",
                    "<span class='quote'>Map</span> | 'Map'",
                    "'Any'"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "transform"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Transformation function that processes values before validation."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "validate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Validation function that analyzes values. It receives both the current value and previous value as parameters, returning a boolean result. Each property's validation status appears as watch function parameters and can be retrieved via the <span class='quote'>getValidation()</span> method."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "skipEqual"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If the value equals the previous one, the property won't update.<br /> This prevents watch execution and makes the property irrelevant to its related computed values.<br/> Default: <span class='quote'>true</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "strict"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When <span class='quote'>true</span>, the validation function acts as a blocker - the property updates only if validation succeeds.<br />Default: <span class='quote'>false</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },

        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "store-typescript",
                "label": "Typescript support"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 02",
                "isSection": true
            },
            "content": "Typescript:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Typescript support:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Every store can implement an interface describing its state structure.<br />This example demonstrates the pattern using jsDoc."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "Note: The type parameter (for dynamic type checking) operates outside TypeScript's validation system."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/store-type.ts",
                "numLines": 4
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/store-type-add.ts",
                "numLines": 19
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "In .ts files, you can pass the interface as a generic parameter."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/store-type-add-typescript.ts",
                "numLines": 14
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small",
                "label": "Methods",
                "isSection": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "store-get-proxi",
                "label": "GetProxi"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 03",
                "isSection": true
            },
            "content": "Methods:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "GetProxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Returns a proxy wrapper for the original object."
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": false,
                "items": [
                    "<span class='quote'>get</span>: The object automatically reflects the current state values.",
                    "<span class='quote'>set</span>: Internally triggers <span class='quote'>myStore.set('prop', value)</span> when modifying the object."
                ]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "Using proxies enables the simplest way to both read and modify state values."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Deep watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The proxy intentionally omits deep watch for performance optimization.<br />To modify nested object contents, you must reassign the entire property."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get-proxi.js",
                "numLines": 35
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Set store value: Directly updates the state while maintaining reactivity."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "set provides an alternative to proxy-based state updates.<br />It offers more configuration options than the proxy approach."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set.js",
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Set Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>emit</span>: &nbsp;Modifies data without triggering reactions (no callbacks fired).<br/> Default: <span class='quote'>true</span>."
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set-params.js",
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy vs object key access:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set-proxi.js",
                "numLines": 3
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-update",
                "label": "Update"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Update"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Update store value:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "update serves as a proxy alternative for state modifications,<br />offering additional configuration options beyond proxy capabilities."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update.js",
                "numLines": 25
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Update Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>emit</span>: &nbsp;Performs silent updates (bypasses reactivity, no callbacks triggered).<br/> Default: <span class='quote'>true</span>.",
                    "<span class='quote'>clone</span>: &nbsp;Creates a copy of original data.<br/> Default: <span class='quote'>false</span>."
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update-params.js",
                "numLines": 20
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy vs object key access:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update-proxi.js",
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get",
                "label": "Get"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Get"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Returns the entire store - use object destructuring to extract specific properties."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "get provides a direct access alternative to proxy-based state reading."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get.js",
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get-props",
                "label": "Get-props"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Get props"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Retrieves a specific property from the store."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "getProp offers a direct alternative to proxy-based state access for reading values."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get-prop.js",
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-watch",
                "label": "Watch"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Subscribes to state changes and provides an unsubscribe callback for cleanup."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/watch.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Watch Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>wait</span>: &nbsp;Defers callback execution until the current JavaScript event loop completes, using the latest value.<br />Only effective when emit-async is not used.<br/> Default: <span class='quote'>false</span>.",
                    "<span class='quote'>immediate</span>: &nbsp;Triggers the initial callback immediately on subscription.<br />Default: <span class='quote'>false</span>."
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/watch-props.js",
                "numLines": 10
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy vs object key access:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/watch-proxi.js",
                "numLines": 12
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit",
                "label": "Emit"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Emit"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Triggers all property-specific callback functions."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit.js",
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy vs object key access:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit-proxi.js",
                "numLines": 12
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit-async",
                "label": "Emit-async"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Emit async"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Processes all asynchronous property-related callbacks."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit-async.js",
                "numLines": 24
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy vs object key access:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit-async-proxi.js",
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-computed",
                "label": "Computed"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Computed"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Computed properties automatically update when their dependencies (store properties) change. These values are recalculated in the JavaScript event loop. Key behaviors: <ul> <li>Batch processing: Multiple dependency changes trigger a single recomputation</li> <li>Initial values are determined during initialization using current dependency states</li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "State Locking: After function definition, the target state becomes immutable to manual changes - only updatable through its computed function."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "To configure the target of a computed property and its optional dependencies, you may specify either:  <li>Property keys as strings</li> <li>A function that returns the proxy's value</li>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Explicit dependencies:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using a functional approach lets you:  <li>Declare explicit dependencies</li> <li>Pass current dependency values as callback parameters</li> <li>Avoid relying on state values outside the callback context</li> "
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When dependencies are explicitly declared:  <li>The callback receives <em>only</em> the specified dependencies</li> <li>Alternative: Access proxies directly within the callback</li> "
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed.js",
                "numLines": 19
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxy ( auto detect dependencies )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Proxy automatically captures and tracks all accessed dependencies - no explicit declaration needed."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed-auto.js",
                "numLines": 12
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi ( explicit dependencies)"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Use proxy to automatically define dependencies."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed-proxi-dependecies.js",
                "numLines": 13
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Cascade computed"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed-multi.js",
                "numLines": 29
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-bind",
                "label": "BindStore"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "BindStore"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "You can connect multiple stores to:  <li>Access their properties reactively</li> <li>Sync computations across stores</li> "
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Connected stores will utilize these methods:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "<span class='quote'>get</span>",
                    "<span class='quote'>getProxi</span> ( only as getter )",
                    "<span class='quote'>watch</span>",
                    "<span class='quote'>computed</span>",
                    "<span class='quote'>emit</span>",
                    "<span class='quote'>emitAsync</span>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/bind-store.js",
                "numLines": 24
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "When using bindStore, you must extend the type (using Readonly TypeScript utils)."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/store-type-bind-store.ts",
                "numLines": 8
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-map-set",
                "label": "Built-in objects Map/Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Built-in objects Map/Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The store implementation relies on value reassignment for reactivity. Note:  <li>Special objects (Map, Set) require full reassignment</li> "
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "with update:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Cloning ensures proper value comparison by:  <li>Generating distinct new updated values</li> <li>Enabling accurate previous/current tracking in watch utilities</li> "
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update-map-set.js",
                "numLines": 19
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "with set/proxi:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Unlike update, this operation:  <li>Cannot clone values (modifies source data directly)</li> <li>Requires skipEqual: false to force updates when values match</li>  Watch utility behavior: Previous and current values will report as equal during these direct modifications."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set-proxi-map-set.js",
                "numLines": 17
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "I'm evaluating the possibility of inserting a new parameter in the state definition called skipUpdate to fully exploit the potential of states based on direct mutation such as map and set. For now, you will always have a copy of the previous state or you will update the state remotely by creating a copy anyway. It could be interesting to be able to modify the state remotely without creating a new copy."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-destroy",
                "label": "Destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Destroy store and remove all reference"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/destroy.js",
                "numLines": 4
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Other functions"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "debugStore()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log store status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "debugValidate()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log validate status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/other.js",
                "numLines": 2
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        }
    ]
}

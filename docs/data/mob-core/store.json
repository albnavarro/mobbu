{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Implementations"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Store"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "Classic store based on the pub/sub pattern.<br/> This module will then be the basis of the reactivity of mobJs javascript components."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Feature:"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "items": [
                    "Optional Dynamic type check",
                    "Optional Transform function",
                    "Optional Validation function",
                    "Optional Equal check",
                    "Proxi support"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Basic implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/basic-use.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {}
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Advanced implementations:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/advanced-use.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 26
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "For more advanced use it is necessary to return a function that returns an object with at least one of the following properties: validate, type, skipEqual. It is possible to insert up to a maximum of two levels (both base and advanced use) per property as in the example above.<br/>To use a object with infinite insertions use the any type. In this case it will not be possible to define specific properties for nested properties."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/any.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 16
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "01",
                "isSection": true
            },
            "content": "Params"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "value"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Initial value"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "type"
        },
        {
            "component": "mob-list",
            "props": {
                "items": [
                    "<span class='quote'>Function | 'Function'</span>",
                    "<span class='quote'>String | 'String'</span>",
                    "<span class='quote'>Number | 'Number'</span>",
                    "<span class='quote'>Boolean | 'Boolean'</span>",
                    "<span class='quote'>Array | 'Array'</span>",
                    "<span class='quote'>Element | 'Element'</span>",
                    "<span class='quote'>HTMLElement | HTMLElement</span>",
                    "<span class='quote'>NodeList | 'NodeList'</span>",
                    "<span class='quote'>Set | 'Set'</span>",
                    "<span class='quote'>Map | 'Map'</span>",
                    "<span class='quote'>'Any'</span>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "transform"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Function that transforms the value before being validated"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "validate"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Validation function to analyze the value. This function will take the current value and old value as input parameters and return a boolean value. The validation status of each property will be displayed in as parameters in watch function and will be retrievable using the getValidation() method."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "skipEqual"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If the value is equal to the previous one, the property will not be updated.<br/>The watches will not be executed and the property will have no effect on the computed related to it. The default value is true."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "strict"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If set to true, the validation function will become blocking and the property will be updated only if the validation function is successful.<br/> The default value is false."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-set",
                "label": "Set"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "02",
                "isSection": true
            },
            "content": "Methods:"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Set"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Set store value:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Set Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>emit: </span>&nbsp;Changing data without a reaction ( no callback will be fired ). Default value is <strong>true</strong>."
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/set-params.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-update",
                "label": "Update"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Update"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Update store value:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 25
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Update Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>emit: </span>&nbsp;Changing data without a reaction ( no callback will be fired ). Default value is <strong>true</strong>.",
                    "<span class='quote'>clone: </span>&nbsp;Clone the original data if using a function and make a copy of the original data. Default value is <strong>false</strong>."
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/update-params.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 20
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get",
                "label": "Get"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Get"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will return the complete store, use object destructuring to retrieve the desired property."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get-props",
                "label": "Get-props"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Get props"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "This method will return a specific prop from store."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get-prop.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-get-proxi",
                "label": "GetProxi"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "GetProxi"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Returns a proxy of the original object."
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": false,
                "items": [
                    "<span class='quote'>get</span>: The object will always remain updated to the current state of values",
                    "<span class='quote'>set</span>: Behind the scenes, a <span class='quote'>myStore.set('prop', value)</span> will be executed when setting the object."
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Deep watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The proxy for performance reasons does not implement <span class='quote'>deep watch</span>.<br/> In case you want to modify the content of a nested object, it is necessary to reassign the entire property"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/get-proxi.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 35
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-watch",
                "label": "Watch"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Watch"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Listen to the changing data and return the unsubscribe function."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/watch.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Watch Options: ( optional )"
        },
        {
            "component": "mob-list",
            "props": {
                "tag": "h3",
                "dots": false,
                "items": [
                    "<span class='quote'>wait: </span>&nbsp;Wait for the end of the current javascript loop to execute the callback using the most recent value. This option only has effect if emit-async is not used.</br> Default is <strong>false</strong>",
                    "<span class='quote'>immediate: </span>&nbsp;Executes the first callback immediately.</br> Default is <strong>false</strong>"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/watch-props.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 18
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit",
                "label": "Emit"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Emit"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Execute property-related callbacks"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-emit-async",
                "label": "Emit-async"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Emit async"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Execute property-related async callbacks"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/emit-async.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 24
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-computed",
                "label": "Computed"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Computed"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Update properties value if some dependency ( store props) change.<br/> Computed functions are resolved on the javascript loop.<br/> If multiple dependencies change at the same time, the computed will be resolved only once."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The initial value of computed will be calculated after initialization based on the current dependencies values."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When a computed function is created the state that is changed can no longer be explicitly changed"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Explicit dependencies:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If you adopt a logical and functional approach you can define explicit dependencies and use the current values of the dependencies as parameters of the callback, in this way you will not use state values defined outside the context of the callback."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 19
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "With proxi ( auto detect dependencies )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy, dependencies will be automatically added if they are not explicitly declared."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed-auto.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 13
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Cascade computed"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/computed-multi.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 21
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "store-bind",
                "label": "BindStore"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "BindStore"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It is possible to hook one or more stores and access their properties and consequently their reactivity. This utility can be particularly useful in the context of <span class='quote'>mobJs components</span>. Speaking of stand-alone stores, it can be useful if you want a computed to be updated based on the state of different stores."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Once added, you will be able to use the new store's statuses in the following cases:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "get",
                    "getProxi ( only as getter )",
                    "watch",
                    "computed",
                    "emit",
                    "emitAsync"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/bind-store.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 24
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "id": "store-destroy",
                "label": "Destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Destroy store and remove all reference"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/destroy.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 4
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Other functions"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "debugStore()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log store status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "debugValidate()"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "log validate status."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-core/other.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 2
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        }
    ]
}

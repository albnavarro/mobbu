{
    "data": [
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "<span>component</span>/Repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "This module represents the reactive version of array.map()."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 01",
                "isSection": true
            },
            "content": "Params"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "observe:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul><li>As with other modules, it can be a string or a function that returns a proxy.</li><li>Must be a direct array (not nested within other state objects)</li></ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "clean (optional):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Completely removes all existing components in the list"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "key ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When a key is specified, the order of the components will be reorganized based on the current state of the reference array while preserving their current state.<br/> If no key is specified, components will be added and removed, and the visual update will occur via <a href='#mobJs-bindProps'>bindProps</a>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "useSync ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Components are rendered starting from a webComponent. This module requires internal components to be populated with dedicated attributes. This mechanism is executed automatically but requires an extra operation. In specific cases with a large number of elements, it is possible to pass these attributes more directly using the sync parameter. In this case, simply enable the option and insert it into the component in the form of a function: <span class='quote'>${sync()}</span>.<br/><br/>Note that even if there are performance differences, they are in any case minimal."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "beforeUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Callback fired before the update; it can be asynchronous."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li>Important Restriction: The MobJs.tick() utility won't work inside this function</li> <li>Execution Timing: The app's internal tick only resolves after the repeater completes its work</li> <li>Consequence: Attempting to use it would leave the repeater in a suspended state</li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "afterUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Callback fired at the end of the update."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h4"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Accepts a single parameter object containing:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<p>The current object is a proxy that always stays in sync - it automatically updates its index and value properties whenever the observed array changes.</p>",
                    "<p>The sync function (optional) should be used only when enabling the useSync feature.</p>",
                    "<p>The initialValue (optional) represents the static value of an array element at component creation time - it remains fixed regardless of subsequent updates.</p>",
                    "<p>The initialIndex (optional) captures the array position frozen in time when the component was first created - this index value won't change even if the array later shifts or updates.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li>Container Requirement: <ul> <li>Each repeater requires initialization within a dedicated HTML node</li> </ul> </li> <li>DOM Structure Rules: <ul> <li>Returned DOM must have a single root node as first element</li> <li>Root can be either: <ul> <li>A generic DOM element</li> <li>A component</li> </ul> </li> </ul> </li> <li>Nested Element Handling: <ul> <li>Supports nested invalidate/repeaters within same component/scope</li> <li>Nested repeaters reference parent component's main state</li> For complex nested states: create new components instead </ul> </li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-proxi.js",
                "numLines": 38
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "render native DOM without component"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-native-dom.js",
                "numLines": 21
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "render multiple elements"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-multiple-element.js",
                "numLines": 20
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "useSync ( performance )"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-useSync.js",
                "numLines": 39
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

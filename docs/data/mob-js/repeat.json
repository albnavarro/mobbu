{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "reactive array: repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "Repat represents the reactive counterpart of array.map(). Work on either native DOM elements or components."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "bind:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Reactive state ( must be an array ) to watch"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "clean (optional):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Cleans the entire list by deleting previous components before updating it."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "key ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Optional key, if you are using an array of objects you can use an object key to maintain the order of the results. If multiple elements share the same key, duplicates will be eliminated."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>key used:</strong> If a key is used the only <span class='quote'>persistent</span> components will be those that store the key. The components will not be recycled but if they are new they will be recreated from scratch."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>no key used:</strong> If no key is specified or, only new items will be added, but persistent items will not be affected. Each recycled component will be updated through the bindProps function."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "useSync ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The <span class='quote'>rendering</span> of components always starts from a webComponent, and as such it works by attributes.<br/> In the case of a component inserted inside a repeat, additional attributes are needed, these attributes are added automatically when redenring the components, but this process when we have <span class='quote'>large lists</span> of components to update can lead to performance drops. Enabling this attribute allows the app to not have to perform additional operations and directly add the attributes it needs. The attributes will be returned by the <span class='quote'>sync()</span> function."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "beforeUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered before list update. The function will be active only after the first rendering"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "afterUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event triggered after list update."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The render function. The function has as parameter an object composed as follows:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<strong>current</strong>: A <span class='quote'>proxy</span> object that contains two properties <span class='quote'>index</span> and <span class='quote'>value</span> that are always <span class='quote'>updated</span> when the observed array changes.",
                    "<strong>sync ( optional )</strong>: <span class='quote'>sync function</span> is necessary for tracking key and and the current value of the state observed if <span class='quote'>useSync</span> is settled.",
                    "<strong>initialValue ( optional )</strong>: The value of the single array element taken when the component was created (static value).",
                    "<strong>initialIndex ( optional )</strong>: The index of the array taken when the component was created (static value)."
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<strong>Container</strong>: Each repeater must be initialized inside a <span class='quote'>dedicated HTML node</span>.<br/> <strong>DOM structure:</strong>: The function must return a DOM where the <span class='quote'>first node</span> must be a <span class='quote'>single node</span> regardless of whether it is a generic <span class='quote'>DOM element</span> or a <span class='quote'>component</span>.<br/> <strong>Nested element</strong>: It is possible to nest multiple invalidate/repeaters inside each other in the same <span class='quote'>component/scope</span>."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Type:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-type.d.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 17
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Without key:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-no-key.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 41
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "With key:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-with-key.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 42
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render native DOM without component"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-native-dom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 21
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "useSync ( performance )"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-useSync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 43
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render multiple elements"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-multiple-element.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 118
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "This module represents the <strong>reactive version of array.map()</strong>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "Store / 01",
                "isSection": true,
                "useSticky": false
            },
            "content": "Params"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "observe:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul><li>As with other modules, it can be a <strong>string</strong> or a <strong>function that returns a proxy</strong>.</li><li><strong>Must be</strong> a direct array (not nested within other state objects)</li></ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "clean (optional):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Completely <strong>removes</strong> all existing components in the list"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "key ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When a <strong>key is specified</strong>, the <strong>order</strong> of the components will be <strong>reorganized</strong> based on the <strong>current state</strong> of the reference array while preserving their current state.<br/> If <strong>no key is specified</strong>, components will be <strong>added</strong> and <strong>removed</strong>, and the <strong>visual update</strong> will occur via <a href='#mobJs-bindProps'><strong>bindProps</strong></a>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "useSync ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Components are rendered starting from a <strong>webComponent</strong>. This module requires internal components to be populated with <strong>dedicated attributes</strong>. This mechanism is <strong>executed automatically</strong> but requires an extra operation. In specific cases with a <strong>large number of elements</strong>, it is possible to pass these attributes <strong>more directly</strong> using the sync parameter. In this case, simply enable the option and insert it into the component in the form of a function: <strong>${sync()}</strong>.<br/><br/>Note that even if there are <strong>performance differences</strong>, they are in any case <strong>minimal</strong>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "beforeUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>Callback</strong> fired <strong>before the update</strong>; it can be <strong>asynchronous</strong>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li><strong>Important Restriction</strong>: The <strong>MobJs.tick()</strong> utility <strong>won't work</strong> inside this function</li> <li><strong>Execution Timing</strong>: The app's internal tick only resolves <strong>after</strong> the repeater completes its work</li> <li><strong>Consequence</strong>: Attempting to use it would leave the repeater in a <strong>suspended state</strong></li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "afterUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<strong>Callback</strong> fired at the <strong>end</strong> of the update."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Accepts a single parameter object containing:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<p>The <strong>current</strong> object is a <strong>proxy</strong> that always stays in sync - it automatically updates its <strong>index</strong> and <strong>value</strong> properties whenever the observed array changes.</p>",
                    "<p>The <strong>sync</strong> function (optional) should be used only when enabling the <strong>useSync</strong> feature.</p>",
                    "<p>The <strong>initialValue</strong> (optional) represents the static value of an array element <strong>at component creation time</strong> - it remains fixed regardless of subsequent updates.</p>",
                    "<p>The <strong>initialIndex</strong> (optional) captures the array position <strong>frozen in time</strong> when the component was first created - this index value won't change even if the array later shifts or updates.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li><strong>Container Requirement</strong>: <ul> <li>Each repeater requires initialization within a <strong>dedicated HTML node</strong></li> </ul> </li> <li><strong>DOM Structure Rules</strong>: <ul> <li>Returned DOM must have a <strong>single root node</strong> as first element</li> <li>Root can be either: <ul> <li>A generic <strong>DOM element</strong></li> <li>A <strong>component</strong></li> </ul> </li> </ul> </li> <li><strong>Nested Element Handling</strong>: <ul> <li>Supports nested invalidate/repeaters within same <strong>component/scope</strong></li> <li>Nested repeaters reference <strong>parent component's</strong> main state</li> <li><strong>For complex nested states: create new components instead</strong></li> </ul> </li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-proxi.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 38
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "render native DOM without component"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-native-dom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 21
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "render multiple elements"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-multiple-element.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 118
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "useSync ( performance )"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-useSync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 43
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": " <ul> <li><strong>Reactive Equivalent</strong>: <ul> <li>Functions as the reactive version of <strong>Array.map()</strong></li> </ul> </li> <li><strong>Compatibility</strong>: <ul> <li>Works with both: <ul> <li>Native DOM elements</li> <li>Library components</li> </ul> </li> </ul> </li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "observe:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul> <li><strong>Must be</strong> a direct array (not nested within other state objects)</li> <li><strong>Incompatible with</strong>: <ul> <li>Nested array structures</li>  </ul> </li> </ul> </li> "
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "clean (optional):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Completely <strong>removes</strong> all existing components in the list"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "key ( optional ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul> <li><strong>Key Specified</strong>: <ul> <li><strong>Behavior</strong>: <ul> <li>Elements maintain their <strong>position</strong> and <strong>state</strong> based on key</li> <li>Strict <strong>duplicate prevention</strong>: <ul> <li>Only first occurrence kept for identical keys</li> <li>Subsequent duplicates <strong>removed</strong></li> </ul> </li> </ul> </li> <li><strong>State Preservation</strong>: <ul> <li>Component instances persist when keys match</li> <li>Internal state remains unchanged across updates</li> </ul> </li> </ul> </li> </ul>"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul> <li><strong>No Key Specified</strong>: <ul> <li><strong>Behavior</strong>: <ul> <li>New items will be added to the list</li> </ul> </li> <li><strong>Component Recycling</strong>: <ul> <li>All persistent components are updated via <strong>bindProps</strong> function</li> </ul> </li> </ul> </li> </ul>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "useSync ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<p><strong>Component Rendering Basics</strong>: Rendering always begins from a <strong>webComponent</strong> and operates via attributes. For components within repeats:</p> <ul> <li><strong>In Repeat Context</strong>: <ul> <li>Additional attributes are auto-added during rendering</li> <li>Minimal performance impact (noticeable only in extreme cases)</li> </ul> </li> <li><strong>Manual Optimization</strong>: <ul> <li>Using <strong>sync()</strong> bypasses automatic processing: <ul> <li>System skips attribute injection</li> <li>Developer manually provides required attributes</li> <li>Marginal gains for most use cases</li> </ul> </li> </ul> </li> </ul> <p>Choose between automatic handling or manual control based on specific needs.</p>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "beforeUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul> <li><strong>Pre-Update Event</strong>: <ul> <li>Triggers <strong>before</strong> list modifications occur</li> <li><strong>Activation Timing</strong>: <ul> <li>Becomes active <strong>after</strong> initial render completes</li> <li>Inactive during first mount/render cycle</li> </ul> </li> </ul> </li> </ul>"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li><strong>Important Restriction</strong>: The <strong>MobJs.tick()</strong> utility <strong>won't work</strong> inside this function</li> <li><strong>Execution Timing</strong>: The app's internal tick only resolves <strong>after</strong> the repeater completes its work</li> <li><strong>Consequence</strong>: Attempting to use it would leave the repeater in a <strong>suspended state</strong></li> </ul>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "afterUpdate ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<ul> <li><strong>Post-Update Event</strong>: <ul> <li>Triggers immediately after list modifications complete</li> <li>Fires only when all DOM updates are finalized</li> </ul> </li> </ul>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Accepts a single parameter object containing:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<p>The <strong>current</strong> object is a <strong>proxy</strong> that always stays in sync - it automatically updates its <strong>index</strong> and <strong>value</strong> properties whenever the observed array changes.</p>",
                    "<p>The <strong>sync</strong> function (optional) should be used only when enabling the <strong>useSync</strong> feature.</p>",
                    "<p>The <strong>initialValue</strong> (optional) represents the static value of an array element <strong>at component creation time</strong> - it remains fixed regardless of subsequent updates.</p>",
                    "<p>The <strong>initialIndex</strong> (optional) captures the array position <strong>frozen in time</strong> when the component was first created - this index value won't change even if the array later shifts or updates.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<ul> <li><strong>Container Requirement</strong>: <ul> <li>Each repeater requires initialization within a <strong>dedicated HTML node</strong></li> </ul> </li> <li><strong>DOM Structure Rules</strong>: <ul> <li>Returned DOM must have a <strong>single root node</strong> as first element</li> <li>Root can be either: <ul> <li>Generic <strong>DOM element</strong></li> <li>Library <strong>component</strong></li> </ul> </li> </ul> </li> <li><strong>Nested Element Handling</strong>: <ul> <li>Supports nested invalidate/repeaters within same <strong>component/scope</strong></li> <li>Nested repeaters reference parent component's main state</li> <li>For complex nested states: create new components instead</li> </ul> </li> </ul>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Use proxi as observe properties"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using proxy instead object key"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-proxi.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 38
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Without key:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-no-key.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 41
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "With key:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-with-key.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 42
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render native DOM without component"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-native-dom.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 21
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "useSync ( performance )"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-useSync.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 43
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "render multiple elements"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/repeat-multiple-element.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 118
            }
        }
    ]
}

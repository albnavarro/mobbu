{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "bindProps"
        },
        {
            "component": "anchor-button",
            "props": {
                "anchor": "#proxi",
                "content": "With proxi"
            }
        },
        {
            "component": "anchor-button",
            "props": {
                "anchor": "#explicit",
                "content": "Explicit dependency"
            }
        },
        {
            "component": "anchor-button",
            "props": {
                "anchor": "#additional",
                "content": "Additional props"
            }
        },
        {
            "component": "anchor-button",
            "props": {
                "anchor": "#typescript",
                "content": "Typescript"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "To pass <strong>callbacks</strong> use <a href='#mobJs-staticProps'><strong>staticProps</strong>,</a> callbacks do not react to the component's state but can be used by child components to change the state."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "proxi"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "With proxi ( auto detect dependencies )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Using a proxy you do not need to define dependencies. You can define dependencies for more granular control."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "bindProps in its <strong>simplest form</strong> with <strong>function</strong> combined with the use of the <strong>proxy</strong> is the most <strong>convenient</strong> and <strong>recommended</strong> form"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-props-proxi.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 27
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "explicit"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Explicit dependency"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "observe ( optional )"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The observe property is an array in which the states to monitor are listed, bindProps will fire when one or all of the listed states change. If the states change in the same eventLoop there will be only one reaction. The parameter is optional since within a repeater the monitored state will trigger the reaction by default, if you want to monitor only that state you can omit the observe parameter."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "props"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The props property is a function that takes as input an object with all state values of the parent component (not just the monitored states).<br/> This function will return an object with the values to assign to the state of the child component."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-props.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 71
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "additional"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Additional props"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "value/index"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Indicates the current value and position of the component inside a <strong><a href='#mobJs-repeat'>repeater</a></strong>."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "Although <strong>bindProps</strong> can return the <strong>current</strong> and <strong>updated</strong> value inside a <strong>repeater</strong> it is advisable to use the current <strong>proxy</strong> provided by the <strong>repeater</strong> itself, which is more convenient and integrated into the <strong>typescript</strong> environment."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-props-extra.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 11
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "typescript"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Typescript"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "<strong>jsDoc</strong>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-props-jsdoc.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 12
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "<strong>ts</strong>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-props-ts.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 11
            }
        }
    ]
}

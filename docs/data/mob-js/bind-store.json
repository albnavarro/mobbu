{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "bindStore"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "bindStore allows you to couple the component state to another store ( <a href='#mobCore-store'>mobStore</a> ) taking advantage of its reactivity."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "To add multiple stores pass an <strong>array</strong> as an argument.<br/>The bindStore function must be <strong>called first</strong> before receiving the <strong>proxy</strong> object, or using the <strong>watch</strong> function."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Once added, you will be able to use the new store's statuses in the following cases:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "getState",
                    "getProxi ( only as getter )",
                    "watch",
                    "computed ( as dependencies )",
                    "emit",
                    "emitAsync",
                    "bindText",
                    "binsProxi",
                    "bindEffect",
                    "invalidate",
                    "repeat"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "There is a special store ( <strong>MobJs.mainStore</strong> ) that handles all <strong>mobJs events</strong> as in the following example:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-store.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 35
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "When using the bindStore utility you need to extend the type ( use readOnlyts utils )."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/bind-store-type.ts",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 16
            }
        }
    ]
}

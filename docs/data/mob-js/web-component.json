{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "WebComponent"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<p>When working with web components, your HTML function's first node must use the exact same tag name as both the component's <a href='./#mobJs-component'>definition</a> and its subsequent instantiation calls.</p>"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/web-component-function.js",
                "numLines": 15
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "createComponent additional params:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<p>The <a href='./#mobJs-component'>createComponent</a> function serves as your control center - here you'll define all lifecycle hooks that manage how your component behaves from birth to removal.</p>"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>style</span>",
                    "<span class='quote'>connectedCallback</span>",
                    "<span class='quote'>adoptedCallback</span>",
                    "<span class='quote'>disconnectedCallback</span>",
                    "<span class='quote'>attributeChangedCallback</span>",
                    "<span class='quote'>attributeToObserve</span>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Common argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<p>Each parameter automatically receives the web component context (the custom element's instance), and optionally - as shown in the example below - can accept a utility object containing all our function's helper methods.</p>"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "context ( native webComponent context ):"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "webComponent context"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "params"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "All utilities passed as parameters in the component function"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Specific argument:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The <span class='quote'>attributeChangedCallback</span> comes supercharged with extra parameters that bridge directly to the native webComponent observer - giving you hooks into:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>name</span>: name of the changed attribute",
                    "<span class='quote'>oldValue</span>: old value",
                    "<span class='quote'>newValue</span>: new value"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/web-component-definition.js",
                "numLines": 53
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Box sizing:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Solve web component box-sizing problem."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-js/box-sizing.scss",
                "numLines": 5
            }
        }
    ]
}

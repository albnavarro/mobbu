{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "<span>component</span>/invalidate vs repeat"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "big"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "isBold": true
            },
            "content": "Invalidate:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "<p>The invalidate function handles the complete DOM refresh cycle - it automatically clears out the old DOM structure and delivers a brand new DOM in return.</p>",
                    "<p>Inside an invalidate, you have complete freedom in code structure - including using standard JavaScript <span class='quote'>Array.map()</span> to generate element lists when reactivity isn't required.</p>",
                    "<p>The invalidate function shines for conditional DOM generation - simply return a function containing your logic, where you can leverage getState() to build anything from basic to complex rendering conditions.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "isBold": true
            },
            "content": "Repeater:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "<p>Think of the repeater module as the reactive version of JavaScript's <span class='quote'>Array.map()</span> - it automatically keeps your DOM in sync with underlying data changes.</p>",
                    "<p>The repeater either recycles component state or maintains source data order - ensuring optimal performance while preserving your intended structure.</p>",
                    "<p>Unlike invalidate, the repeat function has one key requirement - it must return a single root node as its first element, no matter what DOM structure follows.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "isBold": true
            },
            "content": "Difference:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "<p>Both repeat and invalidate functions need to be wrapped in their own dedicated div - this container requirement applies equally to either function.</p>",
                    "<p>A repeater using the clean=true option essentially becomes the polar opposite of an invalidate - they're mirror images in behavior and DOM handling.</p>",
                    "<p>This library fundamentally separates static and dynamic content - proper use of invalidate/repeater brings component clarity, mirroring how staticProps/bindProps organize property management.</p>"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3",
                "isBold": true
            },
            "content": "Performance:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": true,
                "items": [
                    "<p>At creation time, performance is comparable - though invalidate typically runs a tad faster, while repeat-with-key carries a slight overhead due to its tracking mechanisms.</p>",
                    "For updates, the repeater without key delivers peak performance - when component state preservation isn't required, this lightweight approach comes strongly recommended."
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": false,
                "links": true,
                "items": [
                    {
                        "label": "invalidate",
                        "url": "./#mobJs-invalidate"
                    },
                    {
                        "label": "repeat ( array.map )",
                        "url": "./#mobJs-repeat"
                    }
                ]
            }
        }
    ]
}

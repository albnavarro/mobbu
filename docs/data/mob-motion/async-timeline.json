{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "<span>Async</span>/AsyncTimeline"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "Related group: <span class='quote'><a href='#mobMotion-tween-spring-lerp'>async tween</a></span> | <span class='quote'><a href='#mobMotion-async-timeline'>asyncTimeline</a></span><br/><br/>Async timeline is a promise-based animation coordinator that manages <span class='quote'>timetweens</span>, <span class='quote'>lerps</span>, and <span class='quote'>springs</span>. It handles single animations or groups, supports looping, and allows custom functions between animations."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "Example:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "dots": false,
                "links": true,
                "items": [
                    {
                        "label": "View implementation example",
                        "url": "./#async-timeline"
                    }
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small",
                "label": "Params",
                "isSection": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "schema",
                "label": "Schema"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "index": "AsyncTimeline / 01",
                "isSection": true
            },
            "content": "Params:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-schema.d.ts",
                "numLines": 7
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline.js",
                "numLines": 10
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "all",
                "label": "All params"
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "repeat:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Sets the number of animation loops.<br/>-1 creates an infinite loop."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "yoyo:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When enabled, reverses animation direction after each loop.<br/>All tween values flip between start and end points."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "freeMode:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "By default, <span class='quote'>play()</span> and <span class='quote'>playReverse()</span> reset tweens to their initial/final values by performing set actions, but without adding them to the timeline (unlike AutoSet, which applies them every cycle). freeMode disables this behavior"
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "autoSet:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If set to <span class='quote'>true</span>, it permanently adds set actions at the start/end points of the timeline, forcing the positions and preventing tweens from exceeding the timeline's length."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "inheritProps:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When <span class='quote'>true</span>, it allows inheriting unspecified properties for the current tween from previous steps and merges them with those defined by the user."
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "forceFromTo:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "It transforms all actions into <span class='quote'>goFromTo()</span>."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<strong>autoSet</strong> and <strong>inheritProps</strong> are set to true by default, ensuring greater safety in most cases. However, they also make the timeline more rigid and less capable of breaking out of conventional patterns. These settings can be adjusted deliberately"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<strong>forceFromTo</strong> is an evolution of <strong>inheritProps</strong>. It will use the inherited properties to transform an action, for example goTo(), into a goFromTo(). It is a very powerful option that, when combined with autoSet, eliminates any kind of side effect from the timeline. It is disabled by default because when using groups with the waitComplete: false option, the longest tweens will be cut short. If this is not your use case, this option is recommended.<br/>forceFromTo will enable inheritProps."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "<strong>FreeMode</strong> is a controversial option. Enabling it while disabling autoSet, inheritProps, and forceFromTo removes all safety systems from the timeline. This allows you to control individual tweens outside of the timeline, forcing the timeline itself to adapt. It is a difficult option to manage but remains available."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Example"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-example.js",
                "numLines": 72
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "override",
                "label": "tween&nbsp;params&nbsp;and&nbsp;override"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "tween params and override"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Each tween instance uses its own parameters by default. The following schema shows override options, including the delay parameter (in milliseconds), which is not a property of the tween itself but is controlled by the parent timeline instance."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-override.js",
                "numLines": 14
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },

        {
            "component": "mob-spacer",
            "props": {
                "style": "x-small",
                "label": "Methods",
                "isSection": true
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "set",
                "label": "Set"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h2",
                "isSection": true,
                "index": "AsyncTimeline / 02"
            },
            "content": "Methods"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Set"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-set.js",
                "numLines": 1
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goto",
                "label": "goTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goTo"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-go-to.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFrom",
                "label": "goFrom"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFrom"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-go-from.js",
                "numLines": 3
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "goFromTo",
                "label": "goFromTo"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "goFromTo"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-go-from-to.js",
                "numLines": 13
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "add",
                "label": "add/addAsync"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "add/addAsync"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Execute synchronous or asynchronous functions within the timeline. Both types execute only after the previous animation completes, ensuring perfect sequencing."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "addAsync params:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>resolve</span>: Promise resolution function",
                    "<span class='quote'>loop</span>: Current iteration count",
                    "<span class='quote'>direction</span>: Timeline direction (<span class='quote'>forward</span> or <span class='quote'>backward</span>)"
                ]
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-add.js",
                "numLines": 33
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "createGroup",
                "label": "create/closeGroup"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "createGroup/closeGroup"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Manages parallel animation groups.<br/>waitComplete determines resolution timing:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>true</span>: Waits for all tweens ( <span class='quote'>Promise.all</span> )",
                    "<span class='quote'>false</span>: Proceeds after first tween completes ( <span class='quote'>Promise.race</span> )"
                ]
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Individual tweens within groups still respect their delay properties."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-group.js",
                "numLines": 27
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "suspend",
                "label": "suspend"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "suspend"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Pauses timeline execution. Use <span class='quote'>resume()</span> to continue. Suspension occurs only after completing the current animation."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-suspend.js",
                "numLines": 16
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "label",
                "label": "label"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "label"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Marks timeline positions for <span class='quote'>playFrom(label)</span> or <span class='quote'>playFromReverse(label)</span> navigation."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-label.js",
                "numLines": 9
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "settween",
                "label": "setTween"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "setTween"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Ensures tweens with delays align properly when jumping to labels. Essential for precise timeline navigation."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-set-tween.js",
                "numLines": 5
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "play",
                "label": "play/playRevese/stop"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "play/playReverse/stop"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span class='quote'>play()</span> and <span class='quote'>playReverse()</span> return Promises upon completion. <span class='quote'>stop()</span> clears stagger caches by default (configurable)."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-play.js",
                "numLines": 14
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "playFrom",
                "label": "playFrom/playFromReverse"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "playFrom/playFromReverse"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Version of <span class='quote'>play()</span> that starts from specific labels."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-play-from.js",
                "numLines": 9
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "pause/resume",
                "label": "pause/resume"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "pause/resume"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span class='quote'>pause()</span> freezes execution. <span class='quote'>resume()</span> continues from paused/suspended states."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-pause.js",
                "numLines": 9
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "reverseNext",
                "label": "reverseNext"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "reverseNext"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Reverses timeline direction after completing current animation."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-next.js",
                "numLines": 20
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "onLoopEnd",
                "label": "onLoopEnd/onComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "onLoopEnd/onComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Event handlers returning unsubscribe functions:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h6"
            },
            "content": "onLoopEnd params:"
        },
        {
            "component": "mob-list",
            "props": {
                "style": "medium",
                "items": [
                    "<span class='quote'>loop</span>: Current loop count",
                    "<span class='quote'>direction</span>: Active direction (<span class='quote'>forward</span> <span class='quote'>backward</span>)"
                ]
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-events.js",
                "numLines": 9
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "destroy",
                "label": "destroy"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "destroy"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Terminates timeline and all child tweens. <em>Remember to clear external references.</em>"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-destroy.js",
                "numLines": 8
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "utils",
                "label": "Utils"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Utils"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "<span class='quote'>isPaused()</span> - <span class='quote'>isSuspended()</span> - <span class='quote'>getDirection()</span> - Timeline status checkers:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/async-timeline-utils.js",
                "numLines": 3
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

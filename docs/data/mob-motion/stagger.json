{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Stagger"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "The <strong>stagger's</strong> task is to calculate the number of delay frames for each subscriber of the tween. The stagger does not generate new instances of our tween - it simply manages their rendering over time in specific <strong>requestAnimationFrame</strong> calls. This count varies based on the frame rate identified at the start. The stagger can no longer be modified once calculated."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "For more efficient management of staggers, it is preferable to use <strong>subscribeCache</strong> instead of <strong>subscribe</strong> to apply the values calculated by the various tweens. By using <strong>subscribeCache</strong>, a tween (or a timeline) will be able to, when one of the methods between <strong>pause()</strong> and <strong>stop()</strong> is called, apply the same action to the related staggers as well ( <a href='#async-timeline'><strong>async example</strong></a>, <a href='#caterpillarN2'><strong>sync example</strong></a>  ).<br/><br/> <strong>ScrollTrigger/Parallax</strong> do not operate in terms of <strong>pause/stop</strong>, and in this case, the staggers <strong>will continue their run</strong>, realigning to the current value (<a href='#scrollerN1'><strong>example</strong></a>). Keep in mind that <strong>sequencer</strong> will be able to utilize the <a href='#mobMotion-create-stagger'><strong>createStagger</strong></a> module to manage staggers as separate tweens ( <a href='#scrollerN0?version=1&activeId=1'><strong>example</strong></a> )."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "example:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If we had 2 subscribers, in the simplest case, with a stagger value of 2 frames each, we could have a situation like:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The first subscriber will use the frames: <strong>0,1,2,3,4,...</strong><br/>The second subscriber will use the frames: <strong>2,3,4,5,6,...</strong><br/>Naturally, the offset value will vary based on the frame rate."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Stagger interface example:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/stagger-interface.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 17
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "each",
                "label": "each"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "each"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines the <strong>offset</strong> between renderings:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/each.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "waitComplete",
                "label": "waitComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "waitComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines whether the tween is considered completed when the stagger for the <strong>first</strong> subscriber begins (<strong>waitComplete: false</strong>) or when the <strong>last</strong> subscriber finishes (<strong>waitComplete: true</strong>). The animated pattern modules rely on this mechanism. Using <strong>waitComplete: false</strong>, loops of tweens synchronized by an <strong>asyncTimeline</strong> will repeat without considering the stagger durations, creating independent animations. This can create a continuous movement effect by concatenating multiple tweens."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/wait-complete.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "from",
                "label": "from"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "from"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines where in the subscriber array the first stagger begins."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "The <strong>{ x: number, y: number }</strong> object will only take effect with a <strong>grid: { direction: 'radial' }</strong> parameter."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/from.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "grid",
                "label": "grid"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "grid"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When using a two-dimensional column/row model, you need to specify the number of <strong>columns</strong> and <strong>rows</strong>. You can then specify whether to group subscribers by <strong>row/column</strong> or as a single <strong>radial</strong> element."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "You can experiment with 'incorrect' grid numbers to create interesting offset patterns."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/grid.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 11
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

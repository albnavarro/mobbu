{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "Stagger"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "The stagger's task is to calculate the number of delay frames for each subscriber of the tween. The stagger does not generate new instances of our tween it simply manages their rendering over time in specific request animation frames. This mechanism is not to be confused with a setTimeout(), the stagger does not think in this way but rather counts the frames, in fact the use of the stagger does not affect the perception of the animation in any way. This count varies based on the frame rate identified at the start. The stagger can no longer be modified once calculated."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "example:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If we had 2 subscribers, in the simplest case, with a value of each equal to 2 we could have a situation like:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The first subscriber will use the frames: 0,1,2,3,4,...<br/> The second subscriber will use the frames: 2,3,4,5,6,...<br/> Naturally the offset value will vary based on the frame rate."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "Stagger interface example:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/stagger-interface.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 17
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "each",
                "label": "each"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "each"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines the offset of the renderings:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/each.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "waitComplete",
                "label": "waitComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "waitComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines whether the tween is considered completed when the sagger for the first subscriber is launched ( waitComplete: false ) or for the last subscriber ( waitComplete: true ). The animated pattern modules are based on this mechanism. Using waitComplete: false the loops of the tweens synchronized by a asyncTimeline will repeat without taking into account the duration of the staggers which will have an 'own life'. Thus, an affect of continuous movement can be created by concatenating several tweens."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/wait-complete.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "from",
                "label": "from"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "from"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines where in the subscriber array the first stagger starts."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "The { x: number, y: number } object will only take effect with a value of the grid: { direction: 'radial' } parameter"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/from.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "grid",
                "label": "grid"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h5"
            },
            "content": "grid"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If you use a two-dimensional column/row model, you need to specify the number of columns and the number of rows. We could then specify whether to group subscribers by row / column or as a single element radial"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "It is possible to play with grids with 'wrong' numbers to create nice offset games."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/grid.js",
                "isFull": true,
                "hasOverflow": false,
                "hasBorder": true,
                "numLines": 11
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}

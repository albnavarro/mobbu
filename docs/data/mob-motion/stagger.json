{
    "data": [
        {
            "component": "mob-spacer",
            "props": {
                "style": "small",
                "id": "start",
                "label": "Overview"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h1",
                "isBold": true
            },
            "content": "<span>Common</span> /Stagger"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true
            },
            "content": "The stagger's task is to calculate the number of delay frames for each subscriber of the tween. The stagger does not generate new instances of our tween - it simply manages their rendering over time in specific requestAnimationFrame calls. This count varies based on the frame rate identified at the start. The stagger can no longer be modified once calculated."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "For more efficient management of staggers, it is preferable to use subscribeCache instead of subscribe to apply the values calculated by the various tweens. By using subscribeCache, a tween (or a timeline) will be able to, when one of the methods between pause() and stop() is called, apply the same action to the related staggers as well ( <a href='#async-timeline'>async example</a>, <a href='#caterpillarN2'>sync example</a>  ).<br/><br/> ScrollTrigger/Parallax do not operate in terms of pause/stop, and in this case, the staggers will continue their run, realigning to the current value (<a href='#scrollerN1'>example</a>). Keep in mind that sequencer will be able to utilize the <a href='#mobMotion-create-stagger'>createStagger</a> module to manage staggers as separate tweens ( <a href='#scrollerN0?version=1&activeId=1'>example</a> )."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "example:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "If we had 2 subscribers, in the simplest case, with a stagger value of 2 frames each, we could have a situation like:"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "The first subscriber will use the frames: <span class='quote'>0,1,2,3,4,...</span><br/>The second subscriber will use the frames: <span class='quote'>2,3,4,5,6,...</span><br/>Naturally, the offset value will vary based on the frame rate."
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "Stagger interface example:"
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "small"
            }
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/stagger-interface.js",
                "numLines": 17
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "each",
                "label": "each"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "each"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines the offset between renderings:"
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/each.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "waitComplete",
                "label": "waitComplete"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "waitComplete"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines whether the tween is considered completed when the stagger for the first subscriber begins ( <span class='quote'>waitComplete: false</span> ) or when the last subscriber finishes ( <span class='quote'>waitComplete: true</span> ). The animated pattern modules rely on this mechanism. Using <span class='quote'>waitComplete: false</span>, loops of tweens synchronized by an asyncTimeline will repeat without considering the stagger durations, creating independent animations. This can create a continuous movement effect by concatenating multiple tweens."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/wait-complete.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "from",
                "label": "from"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "from"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "Determines where in the subscriber array the first stagger begins."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "The { x: number, y: number } object will only take effect with a grid: { direction: 'radial' } parameter."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/from.js",
                "numLines": 6
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium",
                "id": "grid",
                "label": "grid"
            }
        },
        {
            "component": "mob-title",
            "props": {
                "tag": "h3"
            },
            "content": "grid"
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium"
            },
            "content": "When using a two-dimensional column/row model, you need to specify the number of columns and rows. You can then specify whether to group subscribers by row/column or as a single radial element."
        },
        {
            "component": "mob-paragraph",
            "props": {
                "style": "medium",
                "boxed": true,
                "note": true
            },
            "content": "You can experiment with 'incorrect' grid numbers to create interesting offset patterns."
        },
        {
            "component": "mob-snippet",
            "props": {
                "source": "./snippets/mob-motion/grid.js",
                "numLines": 11
            }
        },
        {
            "component": "mob-spacer",
            "props": {
                "style": "medium"
            }
        }
    ]
}
